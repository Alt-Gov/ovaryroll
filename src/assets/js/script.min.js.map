{"version":3,"sources":["ovary-roll.js","script.js"],"names":["ErrorHandler","handleError","error","context","console","static","getItem","key","localStorage","setItem","value","AssetManager","constructor","this","images","loaded","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","preloadImages","all","getImage","GAME_CONFIG","baseWidth","baseHeight","eggWidth","eggHeight","finishLineWidth","finishLineSquareSize","finishLineCols","velocityStep","scaleX","scaleY","verticalOffset","currentScale","GameState","selectedAvatar","roundCount","parseInt","safeLocalStorage","triedAvatars","JSON","parse","updateRoundCount","addTriedAvatar","avatarId","includes","push","stringify","GameRenderer","canvas","assetManager","boundHandleResize","handleResize","bind","window","addEventListener","initialize","setupCanvas","lastDrawState","distance","totalLength","renderFrame","containerWidth","parentElement","clientWidth","scale","Math","min","width","height","max","drawFinishLine","startX","rows","ceil","row","col","fillStyle","fillRect","drawEgg","x","y","angle","color","save","translate","rotate","beginPath","ellipse","PI","fill","closePath","restore","drawObstacleWithPop","progress","baseSize","w","h","heightScale","drawImage","drawObstacles","getPointAtT","progressRatio","eggPosition","obstacles","OBSTACLES","mobileScale","obs","pt","t","type","complete","offsetX","offsetY","dx","dy","sqrt","triggered","animationProgress","clearCanvas","clearRect","drawPath","i","point","moveTo","lineTo","strokeStyle","lineWidth","stroke","renderer","createPointCalculator","current","next","atan2","gameState","EGG_COLORS","Object","keys","horizontalOffset","tempSvg","querySelector","getPointAtLength","finishGame","updateTriedClasses","document","body","contains","removeChild","showResult","hideInfoSections","getElementById","classList","add","querySelectorAll","forEach","section","data","message","sectionId","messageBox","textContent","Set","size","remove","gameSection","messageSection","destroy","removeEventListener","pink","purple","blue","gold","SVG_PATHS","OvaryRollGame","getContext","avatarButtons","animationFrame","setupEventListeners","button","handleAvatarSelection","text","alt","imageUrl","getAttribute","blueskyUrl","encodeURIComponent","open","id","dataset","btn","cancelAnimationFrame","runGame","randomRotation","random","toFixed","style","setProperty","removeProperty","createTempSvg","getTotalLength","update","requestAnimationFrame","createElementNS","tempPath","setAttribute","appendChild","position","ua","navigator","userAgent","test","documentElement","alertHTML","insertAdjacentHTML","toggle","initDIE","link","event","target","hash","preventDefault","scrollTo","top","offsetTop","behavior","focus","href","location","hostname"],"mappings":"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","file":"script.min.js","sourcesContent":["// Error handling utility\r\nclass ErrorHandler {\r\n    static handleError(error, context) {\r\n        console.error(`Error in ${context}:`, error);\r\n        // Could add error reporting service integration here\r\n    }\r\n    \r\n    static safeLocalStorage = {\r\n        getItem: (key) => {\r\n            try {\r\n                return localStorage.getItem(key);\r\n            } catch (error) {\r\n                ErrorHandler.handleError(error, 'localStorage.getItem');\r\n                return null;\r\n            }\r\n        },\r\n        \r\n        setItem: (key, value) => {\r\n            try {\r\n                localStorage.setItem(key, value);\r\n            } catch (error) {\r\n                ErrorHandler.handleError(error, 'localStorage.setItem');\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n// Asset Manager\r\nclass AssetManager {\r\n    constructor() {\r\n        this.images = {};\r\n        this.loaded = false;\r\n    }\r\n\r\n    loadImage(src, key) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.images[key]) {\r\n                resolve(this.images[key]);\r\n                return;\r\n            }\r\n\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                this.images[key] = img;\r\n                resolve(img);\r\n            };\r\n            img.onerror = (error) => {\r\n                ErrorHandler.handleError(error, `Loading image: ${src}`);\r\n                reject(error);\r\n            };\r\n            img.src = src;\r\n        });\r\n    }\r\n\r\n    async preloadImages() {\r\n        try {\r\n            await Promise.all([\r\n                this.loadImage('./src/assets/images/bush.svg', 'bush'),\r\n                this.loadImage('./src/assets/images/angry-trump.svg', 'trump'),\r\n                this.loadImage('./src/assets/images/raspberry-trump.svg', 'neener'),\r\n                this.loadImage('./src/assets/images/kiss-trump.svg', 'trump-kiss'),\r\n                this.loadImage('./src/assets/images/smug-trump.svg', 'trump-smug'),\r\n                this.loadImage('./src/assets/images/sad-ovary.svg', 'ovary')\r\n            ]);\r\n            this.loaded = true;\r\n        } catch (error) {\r\n            ErrorHandler.handleError(error, 'preloadImages');\r\n        }\r\n    }\r\n\r\n    getImage(key) {\r\n        return this.images[key];\r\n    }\r\n}\r\n\r\n// Game Configuration\r\nconst GAME_CONFIG = {\r\n    baseWidth: 900,\r\n    baseHeight: 600,\r\n    eggWidth: 40,\r\n    eggHeight: 55,\r\n    finishLineWidth: 80,\r\n    finishLineSquareSize: 10,\r\n    finishLineCols: 4,\r\n    velocityStep: 0.0048,\r\n    scaleX: 1.15,\r\n    scaleY: 1.15,\r\n    verticalOffset: 40,\r\n    currentScale: 1\r\n};\r\n\r\n// Game State Manager\r\nclass GameState {\r\n    constructor() {\r\n        this.selectedAvatar = null;\r\n        this.roundCount = parseInt(ErrorHandler.safeLocalStorage.getItem('resistanceRollRounds')) || 0;\r\n        this.triedAvatars = JSON.parse(ErrorHandler.safeLocalStorage.getItem('triedAvatars')) || [];\r\n    }\r\n\r\n    updateRoundCount() {\r\n        this.roundCount++;\r\n        ErrorHandler.safeLocalStorage.setItem('resistanceRollRounds', this.roundCount);\r\n    }\r\n\r\n    addTriedAvatar(avatarId) {\r\n        if (!this.triedAvatars.includes(avatarId)) {\r\n            this.triedAvatars.push(avatarId);\r\n            ErrorHandler.safeLocalStorage.setItem('triedAvatars', JSON.stringify(this.triedAvatars));\r\n        }\r\n    }\r\n}\r\n\r\n// Game Renderer\r\nclass GameRenderer {\r\n    constructor(canvas, context) {\r\n        this.canvas = canvas;\r\n        this.context = context;\r\n        this.assetManager = new AssetManager();\r\n        this.boundHandleResize = this.handleResize.bind(this);\r\n        window.addEventListener('resize', this.boundHandleResize);\r\n    }\r\n\r\n    async initialize() {\r\n        await this.assetManager.preloadImages();\r\n        this.setupCanvas();\r\n    }\r\n\r\n    handleResize() {\r\n        this.setupCanvas();\r\n        // Redraw the current state\r\n        if (this.lastDrawState) {\r\n            const { distance, totalLength } = this.lastDrawState;\r\n            this.renderFrame(distance, totalLength);\r\n        }\r\n    }\r\n\r\n    setupCanvas() {\r\n        const containerWidth = this.canvas.parentElement.clientWidth;\r\n        const scale = Math.min(1, containerWidth / GAME_CONFIG.baseWidth);\r\n        \r\n        this.canvas.width = GAME_CONFIG.baseWidth * scale;\r\n        this.canvas.height = GAME_CONFIG.baseHeight * scale;\r\n        \r\n        // Update all scale factors for drawing\r\n        GAME_CONFIG.currentScale = scale;\r\n        GAME_CONFIG.scaleX = 1.15 * scale;\r\n        GAME_CONFIG.scaleY = 1.15 * scale;\r\n        GAME_CONFIG.eggWidth = 40 * scale;\r\n        GAME_CONFIG.eggHeight = 55 * scale;\r\n        GAME_CONFIG.finishLineWidth = 80 * scale;\r\n        GAME_CONFIG.finishLineSquareSize = Math.max(5, 10 * scale);\r\n        GAME_CONFIG.verticalOffset = 40 * scale;\r\n    }\r\n\r\n    drawFinishLine() {\r\n        const startX = this.canvas.width - GAME_CONFIG.finishLineWidth + (10 * GAME_CONFIG.currentScale);\r\n        const rows = Math.ceil(this.canvas.height / GAME_CONFIG.finishLineSquareSize);\r\n\r\n        for (let row = 0; row < rows; row++) {\r\n            for (let col = 0; col < GAME_CONFIG.finishLineCols; col++) {\r\n                this.context.fillStyle = (row + col) % 2 === 0 ? '#000' : '#fff';\r\n                this.context.fillRect(\r\n                    startX + col * GAME_CONFIG.finishLineSquareSize,\r\n                    row * GAME_CONFIG.finishLineSquareSize,\r\n                    GAME_CONFIG.finishLineSquareSize,\r\n                    GAME_CONFIG.finishLineSquareSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    drawEgg(x, y, angle, color) {\r\n        this.context.save();\r\n        this.context.translate(x, y);\r\n        this.context.rotate(angle);\r\n        this.context.beginPath();\r\n        this.context.ellipse(0, 0, GAME_CONFIG.eggWidth / 2, GAME_CONFIG.eggHeight / 2, 0, 0, Math.PI * 2);\r\n        this.context.fillStyle = color;\r\n        this.context.fill();\r\n        this.context.closePath();\r\n        this.context.restore();\r\n    }\r\n\r\n    drawObstacleWithPop(img, x, y, scale, progress) {\r\n        const baseSize = 50 * GAME_CONFIG.currentScale;\r\n        const w = baseSize * scale;\r\n        const h = baseSize * scale;\r\n\r\n        this.context.save();\r\n        this.context.translate(x + w / 2, y + h / 2);\r\n        const heightScale = progress;\r\n        this.context.scale(1, heightScale);\r\n        this.context.drawImage(img, -w / 2, -h / 2, w, h);\r\n        this.context.restore();\r\n    }\r\n\r\n    drawObstacles(getPointAtT, progressRatio = 1, avatarId, eggPosition) {\r\n        const obstacles = OBSTACLES[avatarId] || [];\r\n        const mobileScale = GAME_CONFIG.currentScale;\r\n        \r\n        for (const obs of obstacles) {\r\n            const pt = getPointAtT(obs.t);\r\n            const img = this.assetManager.getImage(obs.type);\r\n            if (!img || !img.complete) continue;\r\n            \r\n            const scale = (obs.scale || 1) * 1.5;\r\n            const baseSize = 50 * mobileScale;\r\n            const w = baseSize * scale;\r\n            const h = baseSize * scale;\r\n            const offsetX = obs.offsetX * mobileScale;\r\n            const offsetY = obs.offsetY * mobileScale;\r\n\r\n            // Only bushes should not be animated\r\n            if (obs.type !== 'bush') {\r\n                const dx = pt.x - eggPosition.x + offsetX;\r\n                const dy = pt.y - eggPosition.y + offsetY;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                // Increase trigger distance back to 100px (scaled for mobile)\r\n                const triggerDistance = 100 * mobileScale;\r\n                \r\n                if (distance <= triggerDistance || obs.triggered) {\r\n                    if (!obs.triggered) {\r\n                        obs.triggered = true;\r\n                        obs.animationProgress = 0;\r\n                    }\r\n                    \r\n                    obs.animationProgress = Math.min(1, (obs.animationProgress || 0) + 0.1);\r\n                    this.drawObstacleWithPop(img, pt.x + offsetX, pt.y + offsetY, scale, obs.animationProgress);\r\n                }\r\n            } else {\r\n                this.context.drawImage(img, pt.x + offsetX, pt.y + offsetY, w, h);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearCanvas() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    drawPath(getPointAtT, progressRatio) {\r\n        const steps = 100;\r\n        this.context.beginPath();\r\n        for (let i = 0; i <= steps; i++) {\r\n            const t = (i / steps) * progressRatio;\r\n            const point = getPointAtT(t);\r\n            if (i === 0) {\r\n                this.context.moveTo(point.x, point.y);\r\n            } else {\r\n                this.context.lineTo(point.x, point.y);\r\n            }\r\n        }\r\n        this.context.strokeStyle = 'rgba(106, 171, 67, 0.5)';\r\n        this.context.lineWidth = 5 * GAME_CONFIG.currentScale;\r\n        this.context.stroke();\r\n    }\r\n\r\n    renderFrame(distance, totalLength) {\r\n        this.lastDrawState = { distance, totalLength };\r\n        this.renderer.clearCanvas();\r\n        this.renderer.drawFinishLine();\r\n        \r\n        const getPointAtT = this.createPointCalculator(totalLength);\r\n        const current = getPointAtT(distance / totalLength);\r\n        const next = getPointAtT(Math.min((distance + GAME_CONFIG.velocityStep * totalLength * 0.5) / totalLength, 1));\r\n        const angle = Math.atan2(next.y - current.y, next.x - current.x);\r\n        \r\n        // Draw path\r\n        this.renderer.drawPath(getPointAtT, distance / totalLength);\r\n        \r\n        // Draw obstacles with current egg position\r\n        this.renderer.drawObstacles(getPointAtT, distance / totalLength, this.gameState.selectedAvatar, current);\r\n        \r\n        // Draw egg\r\n        this.renderer.drawEgg(current.x, current.y, angle, EGG_COLORS[Object.keys(EGG_COLORS)[this.gameState.selectedAvatar - 1]]);\r\n    }\r\n\r\n    createPointCalculator(totalLength) {\r\n        const scaleX = GAME_CONFIG.scaleX;\r\n        const scaleY = GAME_CONFIG.scaleY;\r\n        const horizontalOffset = (this.canvas.width - (GAME_CONFIG.baseWidth * GAME_CONFIG.currentScale)) / 2;\r\n        \r\n        return (t) => {\r\n            const point = this.tempSvg.querySelector('path').getPointAtLength(t * totalLength);\r\n            return {\r\n                x: point.x * scaleX + horizontalOffset,\r\n                y: point.y * scaleY + GAME_CONFIG.verticalOffset\r\n            };\r\n        };\r\n    }\r\n\r\n    finishGame() {\r\n        this.gameState.updateRoundCount();\r\n        this.gameState.addTriedAvatar(this.gameState.selectedAvatar);\r\n        this.updateTriedClasses();\r\n        \r\n        if (this.tempSvg && document.body.contains(this.tempSvg)) {\r\n            document.body.removeChild(this.tempSvg);\r\n        }\r\n        \r\n        this.showResult();\r\n    }\r\n\r\n    hideInfoSections() {\r\n        document.getElementById('info-sections').classList.add('hidden');\r\n        document.querySelectorAll('#info-sections > section').forEach(section => {\r\n            section.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    showResult() {\r\n        const avatarData = [\r\n            { message: 'Nice roll! Reproductive rights are human rights.', sectionId: 'repo-rights' },\r\n            { message: 'Healthcare matters — and so does your roll.', sectionId: 'health-care' },\r\n            { message: 'You rolled for equity. You legend.', sectionId: 'equal-employment' },\r\n            { message: 'Voting protections unlocked. Keep it rolling.', sectionId: 'voting-protections' }\r\n        ];\r\n        \r\n        const data = avatarData[this.gameState.selectedAvatar - 1];\r\n        this.messageBox.textContent = (new Set(this.gameState.triedAvatars)).size >= 4\r\n            ? 'Eggstraordinary work, super reSister! Nothing can slow your roll.'\r\n            : data.message;\r\n\r\n        this.hideInfoSections();\r\n        \r\n        const section = document.getElementById(data.sectionId);\r\n        if (section) {\r\n            section.classList.remove('hidden');\r\n        }\r\n        \r\n        document.getElementById('info-sections').classList.remove('hidden');\r\n        this.gameSection.classList.add('hidden');\r\n        this.messageSection.classList.remove('hidden');\r\n\r\n        // Show egg-messages section at the end of each roll\r\n        document.querySelector('.egg-messages').classList.add('show');\r\n    }\r\n\r\n    // Clean up when needed\r\n    destroy() {\r\n        window.removeEventListener('resize', this.boundHandleResize);\r\n    }\r\n}\r\n\r\n// Game Constants\r\nconst EGG_COLORS = {\r\n    pink: '#ff647d',\r\n    purple: '#9d45a2',\r\n    blue: '#165D8B',\r\n    gold: '#EBA030'\r\n};\r\n\r\nconst SVG_PATHS = [\r\n    // Cleaned Asset 1\r\n    \"M0,28.32c9.48-1.83,18.87-4.05,28.26-6.31C68.05,12.45,108.66,5.46,149.45,1.76c10.22-.93,20.47-1.55,30.73-1.73,8.76-.15,15.84,0,22.44,6.5,13.56,13.35,14.23,33.56,18.5,50.95,4.51,18.36,14.81,34.33,30.83,44.63,14.7,9.45,31.77,14.83,49.13,16.43,8.74.81,17.72.81,26.43-.34,9.56-1.27,13.65-9.42,15.93-17.84,2.15-7.97,3.03-16.48,7.27-23.72s12.4-11.86,20.3-13.71c15.95-3.73,33.53,4.66,40.47,19.6,3.71,7.99,5.59,17.47,3.78,26.19-1.81,8.74-7.19,17.24-12.47,24.3-10.82,14.44-26.18,26.79-25.81,46.54.36,19.46,16.94,27.14,32.51,33.61,8.24,3.42,16.93,6.93,26,6.86,9.87-.08,16.82-5.5,24.6-10.82,14.71-10.06,30.03-19.29,47.94-22.04,18.51-2.85,36.34-2.93,54.44,2.21,13.84,3.93,27.69,10.48,36.96,21.84,2.31,2.83,4.29,5.93,5.88,9.21,1.78,3.68,1.93,7.43,3.67,11.11,3.66,7.75,6.65,15.86,11.61,22.92,9.12,12.99,23.34,23.14,38.13,28.72,29.28,11.04,65.62,1.7,86.09-21.84\",\r\n    // Cleaned Asset 2\r\n    \"M0,23.04c16.74-2.88,33.78-5.77,50.63-3.59,16.85,2.17,33.78,10.21,42.61,24.72,7.47,12.28,10.61,29.96,24.44,33.85,11.46,3.22,22.68-5.9,29.62-15.56,6.95-9.67,12.74-21.15,23.44-26.36,15.34-7.46,36.39,4.51,37.83,21.51,1.19,14.12-9.01,26.76-20.46,35.11-11.45,8.35-24.78,14.22-34.88,24.16-10.1,9.93-16.29,26.11-9.19,38.37,6.32,10.91,20.93,14.51,33.31,12.09,12.37-2.42,23.22-9.52,34.16-15.8,18.94-10.86,43.74-19.27,61.49-6.57,25.86,18.48,12.27,61.46,29.41,88.23,9.18,14.34,26.49,22.01,43.48,23,23.76,1.38,47.89-9.5,62.6-28.21,20.78-26.45,21.25-63.37,16.86-96.72-4.39-33.35-12.67-67.22-6-100.19,1.44-7.11,3.69-14.32,8.47-19.77C434.89,3.21,446.3.37,457.03.04c16.61-.52,34.2,4.59,45.06,17.18,16.91,19.61,12.43,49.23,6.02,74.32-4,15.66-6.1,36.69,8.44,43.75,8.72,4.23,19.59.36,26.53-6.41,6.94-6.77,10.96-15.9,15.32-24.55,2.68-5.31,6-10.93,11.58-12.97,4.35-1.59,9.16-.64,13.7.24,43.01,8.32,87.51,8.86,130.7,1.6\",\r\n    // Cleaned Asset 3\r\n    \"M0,51.45c26.04,12.29,57.55-1.68,85.39,5.65,21.46,5.65,37.71,23.17,50,41.64,12.29,18.47,22.04,38.83,37.01,55.2,19.96,21.83,47.89,34.97,76.48,42.57,7.03,1.87,14.52,3.42,21.49,1.34,15.55-4.66,20.57-24.21,20.31-40.44-.34-21.2-5.25-42.31-14.3-61.48-6.43-13.62-14.95-26.35-19.49-40.72s-4.37-31.45,5.37-42.95c10.35-12.21,28.88-14.67,44.25-10.17,15.37,4.5,28.34,14.65,40.9,24.58,35.5,28.07,71.01,56.14,106.51,84.21,12.07,9.54,28.69,19.45,41.63,11.12,4.22-2.71,7.14-6.98,10.13-11,7.44-10.02,16.28-19.43,27.54-24.79,11.26-5.37,25.35-6.06,35.81.74,5.46,3.55,9.56,8.82,13.14,14.27,12.12,18.47,19.19,39.7,28.34,59.81,9.15,20.11,21.19,39.97,39.92,51.69,18.73,11.72,45.52,12.89,61.48-2.38\",\r\n    // Cleaned Asset 4\r\n    \"M0,289.26c15.94,8.21,35.49,7.73,52.13,1.07,16.65-6.65,30.57-18.97,41.51-33.17,8.97-11.65,16.63-25.11,29.35-32.46,35.19-20.35,83.82,17.65,118.87-2.93,16.72-9.81,24.29-30.65,23.95-50.03-.34-19.38-7.18-37.97-13.16-56.41s-11.21-37.86-8.25-57.02c3.83-24.81,22.41-46.77,46.24-54.66,30.75-10.18,64.38,2.41,92.23,18.94,14,8.3,27.67,17.92,37.05,31.22,20.64,29.26,15.99,69.85,1.8,102.72-10.57,24.49-26.23,50.46-18.26,75.92,5.61,17.92,21.79,30.32,38.05,39.71,16.64,9.6,35.06,17.5,54.26,17.11,19.2-.39,39.2-10.82,46.04-28.77,11.15-29.26-15.5-60.11-13.62-91.36,1.34-22.15,18.88-42.31,40.64-46.69,14.57-2.93,29.81.69,43.29,6.95,38,17.63,24.59,62.56,66.31,95.15,14.36,11.22,28.12,15.97,32.73,17.44,20.23,6.45,38.05,5.15,48.3,3.58\"\r\n];\r\n\r\nconst OBSTACLES = {\r\n    1: [\r\n        { t: 0.8, offsetX: 70, offsetY: -30, scale: 1.5, type: 'bush' },\r\n        { t: 0.3, offsetX: -20, offsetY: -160, scale: 1.8, type: 'bush' },\r\n        { t: 0.05, offsetX: 20, offsetY: 20, scale: 2.3, type: 'trump-smug' },\r\n        { t: 0.6, offsetX: 45, offsetY: -120, scale: 1.5, type: 'ovary' },\r\n        { t: 0.7, offsetX: -40, offsetY: -20, scale: 2.5, type: 'neener' }\r\n    ],\r\n    2: [\r\n        { t: 0.1, offsetX: 110, offsetY: -10, scale: 1, type: 'bush' },\r\n        { t: 0.5, offsetX: 70, offsetY: -250, scale: 1.2, type: 'bush' },\r\n        { t: 0.3, offsetX: 150, offsetY: -60, scale: 1.8, type: 'ovary' },\r\n        { t: 0.8, offsetX: 20, offsetY: 40, scale: 2.4, type: 'trump' },\r\n        { t: 0.0, offsetX: 0, offsetY: 50, scale: 2.2, type: 'trump-kiss' }\r\n    ],\r\n    3: [\r\n        { t: 0.0, offsetX: 20, offsetY: 40, scale: 2, type: 'bush' },\r\n        { t: 0.3, offsetX: 10, offsetY: -190, scale: 1, type: 'bush' },\r\n        { t: 0.7, offsetX: 30, offsetY: -20, scale: 1.5, type: 'bush' },\r\n        { t: 0.2, offsetX: 20, offsetY: -80, scale: 1.3, type: 'trump' },\r\n        { t: 0.3, offsetX: 60, offsetX: -100, scale: 2, type: 'ovary' },\r\n        { t: 0.6, offsetX: 0, offsetY: -120, scale: 2.2, type: 'neener' }\r\n    ],\r\n    4: [\r\n        { t: 0.0, offsetX: 10, offsetY: -240, scale: 2, type: 'bush' },\r\n        { t: 0.7, offsetX: 20, offsetY: -140, scale: 1.4, type: 'bush' },\r\n        { t: 0.3, offsetX: 40, offsetY: -20, scale: 1.8, type: 'trump-kiss' },\r\n        { t: 0.5, offsetX: -10, offsetY: 70, scale: 1.5, type: 'ovary' },\r\n        { t: 0.1, offsetX: -30, offsetY: 0, scale: 3, type: 'neener' }\r\n    ]\r\n};\r\n\r\n// Main Game Class\r\nclass OvaryRollGame {\r\n    constructor() {\r\n        this.canvas = document.getElementById('roll-canvas');\r\n        this.context = this.canvas.getContext('2d');\r\n        this.gameSection = document.getElementById('game-canvas');\r\n        this.messageSection = document.getElementById('result');\r\n        this.messageBox = document.getElementById('message');\r\n        this.avatarButtons = document.querySelectorAll('.avatar');\r\n        \r\n        this.renderer = new GameRenderer(this.canvas, this.context);\r\n        this.gameState = new GameState();\r\n        this.assetManager = new AssetManager();\r\n        \r\n        this.animationFrame = null;\r\n        this.tempSvg = null;\r\n    }\r\n\r\n    async initialize() {\r\n        try {\r\n            await this.renderer.initialize();\r\n            this.setupEventListeners();\r\n            this.updateTriedClasses();\r\n            // Hide the game canvas and egg messages initially\r\n            this.gameSection.classList.add('hidden');\r\n            document.querySelector('.egg-messages').classList.remove('show');\r\n        } catch (error) {\r\n            ErrorHandler.handleError(error, 'Game initialization');\r\n        }\r\n    }\r\n\r\n    setupEventListeners() {\r\n        this.avatarButtons.forEach(button => {\r\n            button.addEventListener('click', () => this.handleAvatarSelection(button));\r\n        });\r\n\r\n        // Add click handlers for egg buttons to open Bluesky compose\r\n        document.querySelectorAll('.egg-button').forEach(button => {\r\n            button.addEventListener('click', () => {\r\n                const avatarData = [\r\n                    { message: 'Nice roll! Reproductive rights are human rights.' },\r\n                    { message: 'Healthcare matters — and so does your roll.' },\r\n                    { message: 'You rolled for equity. You legend.' },\r\n                    { message: 'Voting protections unlocked. Keep it rolling.' }\r\n                ];\r\n                \r\n                // Get the success message based on the current avatar\r\n                const message = (new Set(this.gameState.triedAvatars)).size >= 4\r\n                    ? 'Eggstraordinary work, super reSister! Nothing can slow your roll.'\r\n                    : avatarData[this.gameState.selectedAvatar - 1].message;\r\n\r\n                const text = `${message} I've got a special message for you from ovaryroll.com: ${button.alt}`;\r\n                // Use the absolute URL for the image\r\n                const imageUrl = `https://ovaryroll.com/${button.getAttribute('src')}`;\r\n                // Create the Bluesky intent URL with both text and image\r\n                const blueskyUrl = `https://bsky.app/intent/compose?text=${encodeURIComponent(text)}&image=${encodeURIComponent(imageUrl)}`;\r\n                window.open(blueskyUrl, '_blank');\r\n            });\r\n        });\r\n    }\r\n\r\n    handleAvatarSelection(button) {\r\n        const id = parseInt(button.dataset.id);\r\n        this.gameState.selectedAvatar = id;\r\n        this.avatarButtons.forEach(btn => btn.classList.remove('selected'));\r\n        button.classList.add('selected');\r\n        this.messageSection.classList.add('hidden');\r\n        \r\n        // Hide egg-messages when starting a new roll\r\n        document.querySelector('.egg-messages').classList.remove('show');\r\n        \r\n        // Show the game canvas when an egg is clicked\r\n        this.gameSection.classList.remove('hidden');\r\n        this.renderer.clearCanvas();\r\n        \r\n        // Reset all obstacle states for the selected avatar\r\n        const obstacles = OBSTACLES[id] || [];\r\n        obstacles.forEach(obs => {\r\n            if (obs.type !== 'bush') {\r\n                obs.triggered = false;\r\n                obs.animationProgress = 0;\r\n            }\r\n        });\r\n        \r\n        if (this.animationFrame) {\r\n            cancelAnimationFrame(this.animationFrame);\r\n        }\r\n        \r\n        if (this.tempSvg && document.body.contains(this.tempSvg)) {\r\n            document.body.removeChild(this.tempSvg);\r\n        }\r\n        \r\n        this.runGame();\r\n    }\r\n\r\n    updateTriedClasses() {\r\n        this.avatarButtons.forEach(button => {\r\n            const id = parseInt(button.dataset.id);\r\n            if (this.gameState.triedAvatars.includes(id)) {\r\n                button.classList.add('tried');\r\n                const randomRotation = (Math.random() * 30 - 15).toFixed(2);\r\n                button.style.setProperty('--egg-rotation', `${randomRotation}deg`);\r\n            } else {\r\n                button.classList.remove('tried');\r\n                button.style.removeProperty('--egg-rotation');\r\n            }\r\n        });\r\n    }\r\n\r\n    runGame() {\r\n        try {\r\n            this.tempSvg = this.createTempSvg();\r\n            const totalLength = this.tempSvg.querySelector('path').getTotalLength();\r\n            let distance = 0;\r\n            \r\n            const update = () => {\r\n                if (distance + GAME_CONFIG.velocityStep * totalLength < totalLength) {\r\n                    this.animationFrame = requestAnimationFrame(update);\r\n                    this.renderFrame(distance, totalLength);\r\n                    distance += GAME_CONFIG.velocityStep * totalLength;\r\n                } else {\r\n                    this.finishGame();\r\n                }\r\n            };\r\n            \r\n            update();\r\n        } catch (error) {\r\n            ErrorHandler.handleError(error, 'runGame');\r\n        }\r\n    }\r\n\r\n    createTempSvg() {\r\n        const tempSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n        const tempPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n        tempPath.setAttribute('d', SVG_PATHS[this.gameState.selectedAvatar - 1]);\r\n        tempSvg.setAttribute('viewBox', '0 0 900 600');\r\n        tempSvg.appendChild(tempPath);\r\n        tempSvg.style.position = 'absolute';\r\n        tempSvg.style.width = '0';\r\n        tempSvg.style.height = '0';\r\n        document.body.appendChild(tempSvg);\r\n        return tempSvg;\r\n    }\r\n\r\n    renderFrame(distance, totalLength) {\r\n        this.renderer.clearCanvas();\r\n        this.renderer.drawFinishLine();\r\n        \r\n        const getPointAtT = this.createPointCalculator(totalLength);\r\n        const current = getPointAtT(distance / totalLength);\r\n        const next = getPointAtT(Math.min((distance + GAME_CONFIG.velocityStep * totalLength * 0.5) / totalLength, 1));\r\n        const angle = Math.atan2(next.y - current.y, next.x - current.x);\r\n        \r\n        // Draw path\r\n        this.renderer.drawPath(getPointAtT, distance / totalLength);\r\n        \r\n        // Draw obstacles with current egg position\r\n        this.renderer.drawObstacles(getPointAtT, distance / totalLength, this.gameState.selectedAvatar, current);\r\n        \r\n        // Draw egg\r\n        this.renderer.drawEgg(current.x, current.y, angle, EGG_COLORS[Object.keys(EGG_COLORS)[this.gameState.selectedAvatar - 1]]);\r\n    }\r\n\r\n    createPointCalculator(totalLength) {\r\n        const scaleX = GAME_CONFIG.scaleX;\r\n        const scaleY = GAME_CONFIG.scaleY;\r\n        const horizontalOffset = (this.canvas.width - (GAME_CONFIG.baseWidth * GAME_CONFIG.currentScale)) / 2;\r\n        \r\n        return (t) => {\r\n            const point = this.tempSvg.querySelector('path').getPointAtLength(t * totalLength);\r\n            return {\r\n                x: point.x * scaleX + horizontalOffset,\r\n                y: point.y * scaleY + GAME_CONFIG.verticalOffset\r\n            };\r\n        };\r\n    }\r\n\r\n    finishGame() {\r\n        this.gameState.updateRoundCount();\r\n        this.gameState.addTriedAvatar(this.gameState.selectedAvatar);\r\n        this.updateTriedClasses();\r\n        \r\n        if (this.tempSvg && document.body.contains(this.tempSvg)) {\r\n            document.body.removeChild(this.tempSvg);\r\n        }\r\n        \r\n        this.showResult();\r\n    }\r\n\r\n    hideInfoSections() {\r\n        document.getElementById('info-sections').classList.add('hidden');\r\n        document.querySelectorAll('#info-sections > section').forEach(section => {\r\n            section.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    showResult() {\r\n        const avatarData = [\r\n            { message: 'Nice roll! Reproductive rights are human rights.', sectionId: 'repo-rights' },\r\n            { message: 'Healthcare matters — and so does your roll.', sectionId: 'health-care' },\r\n            { message: 'You rolled for equity. You legend.', sectionId: 'equal-employment' },\r\n            { message: 'Voting protections unlocked. Keep it rolling.', sectionId: 'voting-protections' }\r\n        ];\r\n        \r\n        const data = avatarData[this.gameState.selectedAvatar - 1];\r\n        this.messageBox.textContent = (new Set(this.gameState.triedAvatars)).size >= 4\r\n            ? 'Eggstraordinary work, super reSister! Nothing can slow your roll.'\r\n            : data.message;\r\n\r\n        this.hideInfoSections();\r\n        \r\n        const section = document.getElementById(data.sectionId);\r\n        if (section) {\r\n            section.classList.remove('hidden');\r\n        }\r\n        \r\n        document.getElementById('info-sections').classList.remove('hidden');\r\n        this.gameSection.classList.add('hidden');\r\n        this.messageSection.classList.remove('hidden');\r\n\r\n        // Show egg-messages section at the end of each roll\r\n        document.querySelector('.egg-messages').classList.add('show');\r\n    }\r\n}\r\n\r\n// Initialize the game when the DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const game = new OvaryRollGame();\r\n    game.initialize();\r\n});\r\n","(function () {\r\n    \"use strict\";\r\n\r\n    // Check if the browser is Internet Explorer\r\n    function initDIE() {\r\n        const ua = window.navigator.userAgent;\r\n        const isIE = /MSIE|Trident/.test(ua);\r\n\r\n        if (isIE) {\r\n            document.documentElement.classList.add('ie');\r\n            const alertHTML = `\r\n                <div class=\"browser-alert\">\r\n                    <div class=\"close\"><i class=\"icon-close\"></i></div>\r\n                    <h2>This browser is no longer supported.</h2>\r\n                    <p>For a better user experience, please use one of the following supported browsers:</p>\r\n                    <div class=\"browser-list\">\r\n                        <a href=\"https://www.mozilla.org/en-US/firefox/download/thanks/\" target=\"_blank\">Firefox</a>\r\n                        <a href=\"https://www.google.com/chrome/\" target=\"_blank\">Chrome</a>\r\n                        <a href=\"https://www.microsoft.com/edge\" target=\"_blank\">Edge</a>\r\n                    </div>\r\n                </div>`;\r\n            document.body.insertAdjacentHTML('beforeend', alertHTML);\r\n\r\n            document.querySelector('.browser-alert .close').addEventListener('click', () => {\r\n                document.querySelector('.browser-alert').classList.toggle('closed');\r\n            });\r\n        }\r\n    }\r\n\r\n    // Wrap tables in a responsive container\r\n    function tableWrap() {\r\n        document.querySelectorAll('table').forEach(table => {\r\n            const wrapper = document.createElement('div');\r\n            wrapper.className = 'responsive-table';\r\n            table.parentNode.insertBefore(wrapper, table);\r\n            wrapper.appendChild(table);\r\n        });\r\n    }\r\n\r\n    // Toggle navigation and search menus\r\n    function toggleMenu() {\r\n        document.querySelector('.nav-toggle').addEventListener('click', () => {\r\n            document.body.classList.toggle('nav-open');\r\n            document.body.classList.remove('search-open');\r\n        });\r\n\r\n        document.querySelector('.search-toggle').addEventListener('click', () => {\r\n            document.body.classList.toggle('search-open');\r\n            document.body.classList.remove('nav-open');\r\n            document.querySelector('.site-search input').focus();\r\n        });\r\n\r\n        document.querySelector('.nav-close').addEventListener('click', () => {\r\n            document.body.classList.remove('nav-open', 'search-open');\r\n        });\r\n\r\n        document.querySelector('.filter-toggle').addEventListener('click', () => {\r\n            document.body.classList.toggle('filter-open');\r\n        });\r\n    }\r\n\r\n    // Toggle sections for mobile\r\n    function toggleSection() {\r\n        document.querySelectorAll('.menu-toggle').forEach(toggle => {\r\n            toggle.addEventListener('click', () => {\r\n                const content = toggle.nextElementSibling;\r\n                const height = content.scrollHeight;\r\n                toggle.classList.toggle('open');\r\n                content.style.maxHeight = toggle.classList.contains('open') ? `${height + 35}px` : '0';\r\n            });\r\n        });\r\n\r\n        document.querySelectorAll('.parent').forEach(parent => {\r\n            parent.addEventListener('click', () => {\r\n                parent.classList.toggle('open');\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add class to header when scrolled\r\n    function headerScroll() {\r\n        const header = document.querySelector('.header');\r\n        const headerHeight = header.offsetHeight;\r\n\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY >= headerHeight) {\r\n                document.body.classList.add('scroll');\r\n            } else {\r\n                document.body.classList.remove('scroll');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Smooth scrolling for anchor links\r\n    function initSmoothScroll() {\r\n        document.querySelectorAll('a[href*=\"#\"]:not([href=\"#\"]):not([href=\"#0\"])').forEach(link => {\r\n            link.addEventListener('click', event => {\r\n                const target = document.querySelector(link.hash);\r\n                if (target) {\r\n                    event.preventDefault();\r\n                    window.scrollTo({\r\n                        top: target.offsetTop - 150,\r\n                        behavior: 'smooth'\r\n                    });\r\n                    target.setAttribute('tabindex', '-1');\r\n                    target.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add class to external links\r\n    function externalLinks() {\r\n        document.querySelectorAll('a[href*=\"//\"]').forEach(link => {\r\n            if (!link.href.includes(document.location.hostname)) {\r\n                link.setAttribute('target', '_blank');\r\n                link.classList.add('external');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initialize all functions on DOMContentLoaded\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        initDIE();\r\n        initSmoothScroll();\r\n        externalLinks();\r\n    });\r\n})(); \r\n\r\n"]}